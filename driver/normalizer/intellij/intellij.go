// Package intellij contains the bblfsh predicates we want to look for
// in ASTs generated by the Intellij BashSupport module, which are based
// on constants defined in that library.
package intellij

import . "gopkg.in/bblfsh/sdk.v1/uast/ann"

var (
	AssignmentWord          = HasInternalType("[Bash] assignment_word")
	BackQuote               = HasInternalType("[Bash] backquote `")
	BackQuoteShellCommand   = HasInternalType("backquote shellcommand")
	BraceClose              = HasInternalType("[Bash] }")
	BraceOpen               = HasInternalType("[Bash] {")
	Case                    = HasInternalType("[Bash] case")
	CasePattern             = HasInternalType("case pattern")
	CasePattern2            = HasInternalType("[Bash] case pattern")
	CasePatternList         = HasInternalType("[Bash] case pattern list")
	CombinedWord            = HasInternalType("[Bash] combined word")
	Comment                 = HasInternalType("[Bash] Comment")
	ComposedVariable        = HasInternalType("[Bash] composed variable, like subshell")
	ConditionOperator       = HasInternalType("[Bash] cond_op")
	ConditionalShellCommand = HasInternalType("conditional shellcommand")
	Do                      = HasInternalType("[Bash] do")
	Dollar                  = HasInternalType("[Bash] $")
	Done                    = HasInternalType("[Bash] done")
	DoubleSemiColon         = HasInternalType("[Bash] ;;")
	ElIf                    = HasInternalType("[Bash] elif")
	Else                    = HasInternalType("[Bash] else")
	Fi                      = HasInternalType("[Bash] fi")
	File                    = HasInternalType("FILE")
	For                     = HasInternalType("[Bash] for")
	ForShellCommand         = HasInternalType("for shellcommand")
	Function                = HasInternalType("[Bash] function")
	FunctionDefElement      = HasInternalType("function-def-element")
	GenericBash             = HasInternalType("[Bash] generic bash command")
	GroupElement            = HasInternalType("group element")
	If                      = HasInternalType("[Bash] if")
	IfShellCommand          = HasInternalType("if shellcommand")
	In                      = HasInternalType("[Bash] in")
	IntLiteral              = HasInternalType("[Bash] int literal")
	LeftBracket             = HasInternalType("[Bash] [[ (left bracket)")
	LeftConditional         = HasInternalType("[Bash] [ (left conditional)")
	LineFeed                = HasInternalType("[Bash] linefeed")
	LogicalBlock            = HasInternalType("logical block")
	NamedSymbol             = HasInternalType("[Bash] named symbol")
	OperatorAssign          = HasInternalType("[Bash] =")
	OperatorBoolAnd         = Or(HasInternalType("[Bash] &&"), HasInternalType("[Bash] &"))
	OperatorBoolOr          = Or(HasInternalType("[Bash] ||"), HasInternalType("[Bash] |"))
	OperatorBoolNot         = HasInternalType("[Bash] cond_op !")
	OperatorEqual           = HasInternalType("[Bash] cond_op ==")
	ParenClose              = HasInternalType("[Bash] )")
	DoubleParenClose        = HasInternalType("[Bash] ))")
	ParenOpen               = HasInternalType("[Bash] (")
	DoubleParenOpen         = HasInternalType("[Bash] ((")
	RightBracket            = HasInternalType("[Bash] ]] (right bracket)")
	RightConditional        = HasInternalType("[Bash]  ] (right conditional)")
	RightSquare             = HasInternalType("[Bash] ] (right square)")
	LeftSquare              = HasInternalType("[Bash] [ (left square)")
	SemiColon               = HasInternalType("[Bash] ;")
	Shebang                 = HasInternalType("[Bash] Shebang")
	ShebangElement          = HasInternalType("[Bash] shebang element")
	SimpleCommand           = HasInternalType("simple-command")
	String                  = HasInternalType("[Bash] string")
	StringBegin             = HasInternalType("[Bash] string begin")
	StringContent           = HasInternalType("[Bash] string content")
	StringEnd               = HasInternalType("[Bash] string end")
	Then                    = HasInternalType("[Bash] then")
	UnEvalString            = HasInternalType("[Bash] unevaluated string (STRING2)")
	Until                   = HasInternalType("[Bash] until")
	UntilLoop               = HasInternalType("until loop")
	VarDefElement           = HasInternalType("var-def-element")
	VarSubstitution         = HasInternalType("[Bash] var substitution")
	VarUse                  = HasInternalType("var-use-element")
	Variable                = HasInternalType("[Bash] variable")
	While                   = HasInternalType("[Bash] while")
	WhileLoop               = HasInternalType("while loop")
	Whitespace              = HasInternalType("WHITE_SPACE")
	Word                    = HasInternalType("[Bash] word")
	ErrorElement            = HasInternalType("ERROR_ELEMENT")
	OperatorArithLess       = HasInternalType("[Bash] arith <")
	OperatorArithMore       = HasInternalType("[Bash] arith >")
	OperatorArithEqual      = HasInternalType("[Bash] arith ==")
	OperatorArithNotEqual   = HasInternalType("[Bash] arith !=")
	OperatorLess            = HasInternalType("[Bash] <")
	OperatorLessEqual       = HasInternalType("[Bash] <=")
	OperatorMore            = HasInternalType("[Bash] >")
	OperatorMoreEqual       = HasInternalType("[Bash] >=")
	BracketArithLeft        = HasInternalType("[Bash] [ for arithmetic")
	BracketArithRight       = HasInternalType("[Bash] ] for arithmetic")
	OperatorNotEqual        = HasInternalType("[Bash] !=")
	IncludeCommand          = HasInternalType("include-command")
	SourceFileReference     = HasInternalType("[Bash] File reference")
	CaseEnd                 = HasInternalType("[Bash] esac")
	SubShellCmd             = HasInternalType("subshell shellcommand")
	PipelineCmd             = HasInternalType("[Bash] pipeline command")
	ArithmeticCmd           = HasInternalType("[Bash] arithmetic command")
	ArithmeticSimple        = HasInternalType("[Bash] arithmetic simple")
	LetExpression           = Or(HasInternalType("let command"), HasInternalType("[Bash] lazy LET expression"))
	LetStatement            = HasInternalType("[Bash] let")
	FileDescriptors         = HasInternalType("[Bash] &[0-9] filedescriptor")
	ParameterExpOperatorA   = Or(HasInternalType("[Bash] Parameter expansion operator '@@'"),
		HasInternalType("[Bash] Parameter expansion operator '@'"))
	ParameterExpOperatorH = Or(HasInternalType("[Bash] Parameter expansion operator '##'"),
		HasInternalType("[Bash] Parameter expansion operator '#'"))
	ParameterExpOperatorP = Or(HasInternalType("[Bash] Parameter expansion operator '%%'"),
		HasInternalType("[Bash] Parameter expansion operator '%'"))
	ParameterExpOperatorC = Or(HasInternalType("[Bash] Parameter expansion operator '::'"),
		HasInternalType("[Bash] Parameter expansion operator ':'"))
	ParameterExpOperatorS = Or(HasInternalType("[Bash] Parameter expansion operator '//'"),
		HasInternalType("[Bash] Parameter expansion operator '/'"))
	RedirectList    = HasInternalType("[Bash] redirect list")
	RedirectElement = HasInternalType("[Bash] redirect element")
	AppendOperator  = HasInternalType("[Bash] >>")
)
